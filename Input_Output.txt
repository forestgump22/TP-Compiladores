grammar IOLang;

// Reglas principales
programa         : statement* EOF ;
statement        : varDeclaracion | varAsignacion | entrada | salida ;

varDeclaracion   : tipo ID '=' expr ';' ;    // Declaración de variables
varAsignacion    : ID '=' expr ';' ;         // Asignación de valores a variables

entrada          : 'entrada' '(' ID ')' ';' ; // Leer desde la entrada
salida           : 'salida' '(' expr ')' ';' ; // Mostrar en la salida

// Tipos de datos
tipo             : 'entero' | 'flotante' | 'cadena' ;

// Expresiones y valores
expr             : expr op=('*'|'/') expr      # MulDivExpr
                 | expr op=('+'|'-') expr      # AddSubExpr
                 | '(' expr ')'                # ParenExpr
                 | INT                         # IntExpr
                 | FLOAT                       # FloatExpr
                 | STRING                      # StringExpr
                 | ID                          # IdExpr
                 ;

// Tokens
ID               : [a-zA-Z_][a-zA-Z_0-9]* ;   // Identificadores
INT              : [0-9]+ ;                     // Números enteros
FLOAT            : [0-9]+ '.' [0-9]+ ;          // Números flotantes
STRING           : '"' (~["\r\n])* '"' ;        // Cadenas de texto

// Ignorar espacios y comentarios
WS               : [ \t\r\n]+ -> skip ;         // Espacios en blanco y saltos de línea
COMMENT          : '//' ~[\r\n]* -> skip ;      // Comentarios de línea
