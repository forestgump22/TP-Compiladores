El error que mencionas está relacionado con cómo se está manejando la sintaxis del `return` y los operadores. La gramática actual probablemente no está interpretando correctamente la expresión de retorno ni las referencias a miembros de estructuras.

### Ajustes en la gramática para corregir el error

1. **Manejo del `return`**: Vamos a asegurarnos de que la gramática incluya una regla explícita para manejar `return` en las funciones.
2. **Acceso a miembros de estructuras**: Agregaremos el manejo adecuado de acceso a miembros de estructuras con el operador `.`.

Aquí está la gramática ajustada:

```antlr
grammar SimpleCppWithOverloading;

// Programa principal
program : structDeclaration+ ;

// Declaración de estructuras
structDeclaration
    : 'struct' ID '{' structField* operatorOverload* '}' ';'
    ;

// Campos de la estructura
structField
    : type ID ';'
    ;

// Sobrecarga de operadores
operatorOverload
    : 'operator' overloadableOperator '(' type ID ')' block
    ;

// Operadores que se pueden sobrecargar
overloadableOperator
    : '+' | '-' | '*' | '/' | '==' | '!=' | '<' | '>' | '&&' | '||'
    ;

// Asignación de miembros
assignment
    : ID ('.' ID)* '=' expr ';'
    ;

// Expresiones
expr
    : expr overloadableOperator expr  // Expresiones con operadores sobrecargados
    | '(' expr ')'                   // Expresiones entre paréntesis
    | ID ('.' ID)*                   // Acceso a miembros de estructuras
    | NUM
    | STRING
    ;

// Declaración de un bloque de código
block
    : '{' stat* '}'
    ;

// Declaraciones
stat
    : assignment
    | returnStat
    | expr ';'
    ;

// Manejo de return
returnStat
    : 'return' expr ';'
    ;

// Tipos de datos
type
    : 'int'
    | 'float'
    | 'char'
    | 'bool'
    | 'string'
    | ID                              // Para soportar tipos definidos por el usuario (como Vector)
    ;

// Tokens
ID  : [a-zA-Z_ñÑ][a-zA-Z0-9_ñÑ]* ;           // Identificadores
NUM : [0-9]+ ('.' [0-9]+)? ;                  // Números
STRING : '"' (~["\\] | '\\' .)* '"' ;          // Literales de cadena
WS  : [ \t\n\r]+ -> skip ;                    // Espacios en blanco
```

### Cambios realizados:

1. **Manejo de `return`**: Ahora tenemos una regla específica para las declaraciones de `return`, lo que debería corregir el error relacionado con la expresión de retorno.
   
2. **Acceso a miembros de estructuras**: Se ha modificado la regla `expr` para que permita el acceso a miembros de estructuras usando `ID ('.' ID)*`. Esto corrige el error de referencia de miembros como `p1.edad` y `p1.nombre`.

### Ejemplo actualizado

Con esta nueva gramática, aquí tienes un ejemplo actualizado para probar:

```cpp
struct Vector {
    int x;
    int y;

    operator + (int val) {
        x = x + val;
        y = y + val;
        return *this;
    }

    operator == (Vector v) {
        return (x == v.x && y == v.y);
    }
};

Vector v1;
v1.x = 10;
v1.y = 20;

Vector v2;
v2.x = 10;
v2.y = 20;

v1 + 5;
bool iguales = (v1 == v2);
```

### Explicación:
- **Return en la sobrecarga**: He agregado el `return` en la sobrecarga del operador `+` para retornar el propio objeto tras la operación, lo que es común en C++.
- **Acceso a miembros**: Ahora se pueden acceder a los miembros de `v1` y `v2` con `v1.x`, `v1.y`, etc.

Prueba esta versión en ANTLR Lab y asegúrate de actualizar el archivo `.g4`. Si persisten los problemas, revisa si los errores están en la definición o en el entorno de ejecución.

Avísame si necesitas más ayuda.
